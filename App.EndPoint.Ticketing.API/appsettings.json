{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "NLog": {
    "internalLogLevel": "Error",
    "internalLogFile": "c:\\temp\\bamdad-internal-nlog.log",
    "extensions": [
      {
        "assembly": "NLog.Web.AspNetCore"
      }
    ],
    "targets": {
      "ApplicationError": {
        "type": "Database",
        "keepConnection": "true",
        "dbProvider": "Microsoft.Data.SqlClient",
        "connectionString": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Bamdad-315-DaneshYarDb-3",
        "commandText": "INSERT INTO dbo.ApplicationError (ErrorCode,ApplicationName,ThrownTime,ThrownTimeFa,Level,Message,ExceptionType,StackTrace,InnerException,ExceptionSource,RequestedEndpoint,ErrorFilePath,MethodPath,MethodInputParams,UserId,UserIP,ServerIP,ServerName,UserBrowser,CompanyId,PageRoute) VALUES (NULLIF(@ErrorCode,''),NULLIF(@ApplicationName,''),@ThrownTime,@ThrownTimeFa,@Level,NULLIF(@Message,''),NULLIF(@ExceptionType,''),NULLIF(@StackTrace,''),NULLIF(@InnerException,''),NULLIF(@ExceptionSource,''),NULLIF(@RequestedEndpoint,''),NULLIF(@ErrorFilePath,''),NULLIF(@MethodPath,''),NULLIF(@MethodInputParams,''),NULLIF(@UserId,''),@UserIP,@ServerIP,@ServerName,NULLIF(@UserBrowser,''),NULLIF(@CompanyId,0),NULLIF(@PageRoute,''))",
        "parameters": [
          {
            "name": "@ErrorCode",
            "layout": "${uppercase:${scopeproperty:item=ErrorCode}}"
          },
          {
            "name": "@ApplicationName",
            "layout": "Ticketing"
          },
          {
            "name": "@ThrownTime",
            "layout": "${date:s}"
          },
          {
            "name": "@ThrownTimeFa",
            "layout": "${date:format=yyyy-MM-dd HH\\:mm\\:ss:culture=fa-IR}"
          },
          {
            "name": "@Level",
            "layout": "${level}"
          },
          {
            "name": "@Message",
            "layout": "${exception:format=message}"
          },
          {
            "name": "@ExceptionType",
            "layout": "${exception:format=shorttype}"
          },
          {
            "name": "@StackTrace",
            "layout": "${exception:innerFormat=message}"
          },
          {
            "name": "@InnerException",
            "layout": "${scopeproperty:item=InnerException}"
          },
          {
            "name": "@ExceptionSource",
            "layout": "${exception:format=source}"
          },
          {
            "name": "@RequestedEndpoint",
            "layout": "${aspnet-request-url} - METHOD : ${aspnet-request-method}"
          },
          {
            "name": "@ErrorFilePath",
            "layout": "${scopeproperty:item=ErrorFilePath}"
          },
          {
            "name": "@MethodPath",
            "layout": "${scopeproperty:item=MethodPath}"
          },
          {
            "name": "@MethodInputParams",
            "layout": "PostBody : ${aspnet-request-posted-body} - QueryString : ${aspnet-request-querystring}"
          },
          {
            "name": "@UserId",
            "layout": "${scopeproperty:item=UserId}"
          },
          {
            "name": "@UserIP",
            "layout": "${aspnet-request-ip}"
          },
          {
            "name": "@ServerIP",
            "layout": "${local-ip}"
          },
          {
            "name": "@ServerName",
            "layout": "${machinename}"
          },
          {
            "name": "@UserBrowser",
            "layout": "${scopeproperty:item=UserAgent}"
          },
          {
            "name": "@CompanyId",
            "layout": "${scopeproperty:item=CompanyId}"
          },
          {
            "name": "@PageRoute",
            "layout": "${scopeproperty:item=PageRoute}"
          }
        ]
      }

    },
    "rules": [
      {
        "logger": "*",
        "minLevel": "Error",
        "writeTo": "ApplicationError",
        "final": true,
        "filterDefaultAction": "Log",
        "filters": [
          {
            "type": "when",
            "condition": "contains('${exception:format=shorttype}','OperationCanceledException')",
            "action": "Ignore"
          },
          {
            "type": "when",
            "condition": "contains('${exception:format=shorttype}','TaskCanceledException')",
            "action": "Ignore"
          }
        ]
      }
    ]
  }
}
